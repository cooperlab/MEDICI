function [Symbol Coding] = HUGOLookup(String, HUGO, Preference)
%Lookup HUGO approved gene symbols for a set of input gene symbols,
%accession IDs, or Entrez Gene IDs.
%inputs:
%String - string, 1D cell array or strings to check against HUGO
%          annotation for associations with approved gene symbols.
%HUGO - structure containing list of approved gene symbols and indexed
%       lists of previous symbols, synonyms, accessions linked to these
%       approved symbols.  Generated by ParseHUGO.
%Preference - optional - one of 'Symbol', 'Entrez', 'Accession'. Allows
%             user to specify which input type is being provided.
%outputs:
%Symbol - string or cell array of strings containing approved symbols of
%         associated with inputs. Inputs with no associations are returned
%         as empty.
%Coding - logical array indicating whether input symbol is protein coding 
%         or alias of protein coding gene.

%Licensed to the Apache Software Foundation (ASF) under one
%or more contributor license agreements.  See the NOTICE file
%distributed with this work for additional information
%regarding copyright ownership.  The ASF licenses this file
%to you under the Apache License, Version 2.0 (the
%"License"); you may not use this file except in compliance
%with the License.  You may obtain a copy of the License at
%
%  http://www.apache.org/licenses/LICENSE-2.0
%
%Unless required by applicable law or agreed to in writing,
%software distributed under the License is distributed on an
%"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%KIND, either express or implied.  See the License for the
%specific language governing permissions and limitations
%under the License.

if(nargin == 2)
    Preference = 'blank';
end

if(iscell(String))
    
    %initialize output
    Symbol = cell(size(String));
    Coding = false(size(String));
    
    %lookup each string
    for i = 1:length(String)
        [Symbol{i} Coding(i)] = Lookup(String{i}, HUGO, Preference);
    end
    
else
    
    %lookup string
    [Symbol Coding] = Lookup(String, HUGO);
    
end

end

function [Result Coding] = Lookup(String, HUGO, Preference)

%initialize coding
Coding = false;

if(strcmpi(Preference, 'Symbol') | strcmpi(Preference, 'Symbols'))
    
    %check if string is approved symbol
    Hit = find(strcmpi(String, HUGO.Approved));
    if(~isempty(Hit))
        Result = String;
        Coding = HUGO.Group(Hit);
        return;
    end
    
    %check if string is previous symbol
    Hit = find(strcmpi(String, HUGO.Previous.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1) %ambiguous result
            Result = HUGO.Approved{HUGO.Previous.Indices(Hit(1))};
        else
            Result = HUGO.Approved{HUGO.Previous.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Previous.Indices(Hit));
        end
        return;
    end
    
    %check if string is synonym
    Hit = find(strcmpi(String, HUGO.Synonyms.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1) %ambiguous result
            Result = HUGO.Approved{HUGO.Synonyms.Indices(Hit(1))};
        else
            Result = HUGO.Approved{HUGO.Synonyms.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Synonyms.Indices(Hit));
        end
        return;
    end
    
    %no match found
    Result = [];
    
elseif strcmpi(Preference, 'Accession')
    
    %check if string is accession
    Hit = find(strcmpi(String, HUGO.Accessions.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1)
            error('HUGOLookup: multiple mapping violation.');
        else
            Result = HUGO.Approved{HUGO.Accessions.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Accessions.Indices(Hit));
        end
        return;
    end
    
    %no match found
    Result = [];
    
elseif strcmpi(Preference, 'Entrez')
    
    %check if string is Entrez id
    Hit = find(strcmpi(String, HUGO.Entrez.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1)
            error('HUGOLookup: multiple mapping violation.');
        else
            Result = HUGO.Approved{HUGO.Entrez.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Entrez.Indices(Hit));
        end
        return;
    end
    
    
else %consider all possibilities
    
        %check if string is approved symbol
    Hit = find(strcmpi(String, HUGO.Approved));
    if(~isempty(Hit))
        Result = String;
        Coding = HUGO.Group(Hit);
        return;
    end
    
    %check if string is previous symbol
    Hit = find(strcmpi(String, HUGO.Previous.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1) %ambiguous result
            Result = HUGO.Approved{HUGO.Previous.Indices(Hit(1))};
        else
            Result = HUGO.Approved{HUGO.Previous.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Previous.Indices(Hit));
        end
        return;
    end
    
    %check if string is synonym
    Hit = find(strcmpi(String, HUGO.Synonyms.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1) %ambiguous result
            Result = HUGO.Approved{HUGO.Synonyms.Indices(Hit(1))};
        else
            Result = HUGO.Approved{HUGO.Synonyms.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Synonyms.Indices(Hit));
        end
        return;
    end
    
    %check if string is accession
    Hit = find(strcmpi(String, HUGO.Accessions.Symbols));
    if(~isempty(Hit))
        if(length(Hit) > 1)
            error('HUGOLookup: multiple mapping violation.');
        else
            Result = HUGO.Approved{HUGO.Accessions.Indices(Hit)};
            Coding = HUGO.Group(HUGO.Accessions.Indices(Hit));
        end
        return;
    end
    
    %no match found
    Result = [];
    
end

end
